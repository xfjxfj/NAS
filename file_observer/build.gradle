apply plugin: 'com.android.library'

android {
	compileSdkVersion 30

	defaultConfig {
		minSdkVersion 21
	}
	sourceSets {
		main {
			//让AS识别libs下的.so第三方包
			jniLibs.srcDirs = ['src/main/libs']
			jni.srcDirs = []
		}
	}

//	tasks.withType(JavaCompile) {
//		compileTask -> compileTask.dependsOn ndkBuild
//	}

}

static def isWindows() {
	return System.properties['os.name'].contains('windows')
}

String getNdkBuildPath() {
	Properties properties = new Properties()
	properties.load(project.rootProject.file('local.properties').newDataInputStream())
	def ndkBuildingDir = properties.getProperty("ndk.dir")
	def ndkBuildPath = ndkBuildingDir
//    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
	if (isWindows()) {
		ndkBuildPath = ndkBuildingDir + '/ndk-build.cmd'
	} else {
		ndkBuildPath = ndkBuildingDir + '/ndk-build'
	}
	return ndkBuildPath
}

task ndkBuild(type: Exec, description: 'Compile JNI source via NDK') {
	println('executing ndkBuild')
	def ndkBuildPath = getNdkBuildPath()
	commandLine ndkBuildPath, '-j4', '-C', file('src/main/jni').absolutePath
}

task ndkClean(type: Exec, description: 'clean JNI libraries') {
	println('executing ndkBuild clean')
	def ndkBuildPath = getNdkBuildPath()
	commandLine ndkBuildPath, 'clean', '-C', file('src/main/jni').absolutePath
}
//clean.dependsOn 'ndkClean'

dependencies {
	api fileTree(include: ['*.jar'], dir: 'libs')
	implementation 'androidx.appcompat:appcompat:1.3.0-rc01'
	api 'org.apache:apache:21'
}
